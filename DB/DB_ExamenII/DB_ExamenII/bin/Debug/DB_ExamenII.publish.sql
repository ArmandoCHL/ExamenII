/*
Deployment script for Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Database"
:setvar DefaultFilePrefix "Database"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [dbo].[Orden]...';


GO
CREATE TABLE [dbo].[Orden] (
    [IdOrden]          INT          IDENTITY (1, 1) NOT NULL,
    [IdProducto]       INT          NOT NULL,
    [CantidadProducto] INT          NOT NULL,
    [Estado]           VARCHAR (25) NULL,
    CONSTRAINT [PK_Orden] PRIMARY KEY CLUSTERED ([IdOrden] ASC)
);


GO
PRINT N'Creating Table [dbo].[Producto]...';


GO
CREATE TABLE [dbo].[Producto] (
    [IdProducto]     INT             IDENTITY (1, 1) NOT NULL,
    [NombreProducto] VARCHAR (50)    NOT NULL,
    [PrecioProducto] DECIMAL (18, 2) NOT NULL,
    CONSTRAINT [PK_Producto] PRIMARY KEY CLUSTERED ([IdProducto] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Orden_Producto]...';


GO
ALTER TABLE [dbo].[Orden] WITH NOCHECK
    ADD CONSTRAINT [FK_Orden_Producto] FOREIGN KEY ([IdProducto]) REFERENCES [dbo].[Producto] ([IdProducto]);


GO
PRINT N'Creating Procedure [dbo].[DetalleOrden]...';


GO
CREATE PROCEDURE [dbo].[DetalleOrden]
	
	@IdOrden int = NULL

AS BEGIN
	SET NOCOUNT ON


	SELECT
	
		O.IdOrden,
		O.IdProducto,
		O.CantidadProducto,
		o.Estado

	FROM dbo.Orden O

	WHERE (@IdOrden IS NULL OR IdOrden = @IdOrden)

END
GO
PRINT N'Creating Procedure [dbo].[DetalleProducto]...';


GO
CREATE PROCEDURE [dbo].[DetalleProducto]

	@IdProducto int = NULL

AS BEGIN
	SET NOCOUNT ON


	SELECT
	
		P.IdProducto,
		P.NombreProducto,
		P.PrecioProducto

	FROM dbo.Producto P

	WHERE (@IdProducto IS NULL OR IdProducto = @IdProducto)

END
GO
PRINT N'Creating Procedure [dbo].[EditarOrden]...';


GO
CREATE PROCEDURE [dbo].[EditarOrden]
	
	@IdOrden int,	
	@IdProducto int,
	@CantidadProducto int,
	@Estado VARCHAR(25)
	
AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
	
	UPDATE dbo.Orden SET
	
	IdProducto = @IdOrden,
	CantidadProducto = @CantidadProducto,
	Estado = @Estado
	
	WHERE
		IdOrden= @IdOrden

  COMMIT TRANSACTION TRASA
  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

   SELECT 
         ERROR_NUMBER() AS CodeError,
		 ERROR_MESSAGE() AS MsgError
   
   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Creating Procedure [dbo].[EditarProducto]...';


GO
CREATE PROCEDURE [dbo].[EditarProducto]
	
	@IdProducto int,	
	@NombreProducto varchar(50),
	@PrecioProducto decimal(18,2)

AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
	
	UPDATE dbo.Producto SET
	
	NombreProducto = @NombreProducto,
	PrecioProducto = @PrecioProducto
	
	WHERE
		IdProducto = @IdProducto

  COMMIT TRANSACTION TRASA
  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

   SELECT 
         ERROR_NUMBER() AS CodeError,
		 ERROR_MESSAGE() AS MsgError
   
   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Creating Procedure [dbo].[EliminarOrden]...';


GO
CREATE PROCEDURE [dbo].[EliminarOrden]
	
	@IdOrden int


AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
            DELETE FROM dbo.Orden WHERE IdOrden = @IdOrden
	
	  COMMIT TRANSACTION TRASA
	  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

	   SELECT 
			 ERROR_NUMBER() AS CodeError,
			 ERROR_MESSAGE() AS MsgError
   
	   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Creating Procedure [dbo].[InsertarOrden]...';


GO
CREATE PROCEDURE [dbo].[InsertarOrden]
	
	@IdOrden int,
	@IdProducto int,	
	@CantidadProducto int,
	@Estado varchar(25)

AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
	
	INSERT INTO dbo.Orden
	(IdOrden,
	IdProducto,
	CantidadProducto,
	Estado
	)
	VALUES
	(@IdOrden,
	@IdProducto,
	@CantidadProducto,
	@Estado
	)

  COMMIT TRANSACTION TRASA
  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

   SELECT 
         ERROR_NUMBER() AS CodeError,
		 ERROR_MESSAGE() AS MsgError
   
   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Creating Procedure [dbo].[InsertarProducto]...';


GO
CREATE PROCEDURE [dbo].[InsertarProducto]
	
	@IdProducto int,	
	@NombreProducto varchar(50),
	@PrecioProducto decimal(18,2)

AS BEGIN
SET NOCOUNT ON

  BEGIN TRANSACTION TRASA

    BEGIN TRY
	
	INSERT INTO dbo.Producto
	(IdProducto,
	NombreProducto,
	PrecioProducto
	)
	VALUES
	(
	@IdProducto,
	@NombreProducto,
	@PrecioProducto
	)

  COMMIT TRANSACTION TRASA
  SELECT 0 AS CodeError, '' AS MsgError

  END TRY

  BEGIN CATCH

   SELECT 
         ERROR_NUMBER() AS CodeError,
		 ERROR_MESSAGE() AS MsgError
   
   ROLLBACK TRANSACTION TRASA

   END CATCH

 END
GO
PRINT N'Creating Procedure [dbo].[ListarOrdenes]...';


GO
CREATE PROCEDURE [dbo].[ListarOrdenes]
	

AS BEGIN
	SET NOCOUNT ON

	SELECT * FROM dbo.Orden

END
GO
PRINT N'Creating Procedure [dbo].[ListarProductos]...';


GO
CREATE PROCEDURE [dbo].[ListarProductos]

	

AS BEGIN
	SET NOCOUNT ON


	SELECT * FROM dbo.Producto 


END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Orden] WITH CHECK CHECK CONSTRAINT [FK_Orden_Producto];


GO
PRINT N'Update complete.';


GO
